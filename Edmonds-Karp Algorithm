from collections import deque

def edmonds_karp(capacity, source, sink):
   
    flow = {u: {v: 0 for v in capacity} for u in capacity}

    def bfs():
        parent = {node: None for node in capacity}
        parent[source] = source
        queue = deque([source])

        while queue:
            u = queue.popleft()
            for v in capacity[u]:
                if parent[v] is None and capacity[u][v] - flow[u][v] > 0:  # Residual capacity > 0
                    parent[v] = u
                    if v == sink:
                        return parent
                    queue.append(v)
        return None

    max_flow = 0

    while True:
        parent = bfs()
        if not parent:
            break

        # Find the minimum residual capacity along the path
        path_flow = float('inf')
        v = sink
        while v != source:
            u = parent[v]
            path_flow = min(path_flow, capacity[u][v] - flow[u][v])
            v = u
        v = sink
        while v != source:
            u = parent[v]
            flow[u][v] += path_flow
            flow[v][u] -= path_flow
            v = u

        max_flow += path_flow

    return max_flow

capacity = {
    'S': {'A': 10, 'B': 5},
    'A': {'B': 15, 'C': 10},
    'B': {'C': 10, 'D': 10},
    'C': {'T': 10},
    'D': {'T': 10},
    'T': {}
}

source = 'S'
sink = 'T'
max_flow = edmonds_karp(capacity, source, sink)
print("Maximum Flow:", max_flow)
