import numpy as np

def floyd_warshall(graph):
    n = len(graph)
    dist = np.array(graph)  
   
    for k in range(n):  
        for i in range(n):  
            for j in range(n): 
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

    return dist

graph = [
    [0, 3, float('inf'), float('inf')],
    [2, 0, float('inf'), 1],
    [float('inf'), 7, 0, 2],
    [float('inf'), float('inf'), 3, 0]
]

shortest_paths = floyd_warshall(graph)
print("Shortest paths matrix:")
print(shortest_paths)
