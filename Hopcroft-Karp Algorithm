from collections import deque

def hopcroft_karp(graph):
    
    left = list(graph.keys())            
    right = {v for neighbors in graph.values() for v in neighbors} 
    pair_u = {u: None for u in left}     
    pair_v = {v: None for v in right}   
    dist = {}

    def bfs():
        queue = deque()
        for u in left:
            if pair_u[u] is None:
                dist[u] = 0
                queue.append(u)
            else:
                dist[u] = float('inf')
        dist[None] = float('inf')

        while queue:
            u = queue.popleft()
            if dist[u] < dist[None]:
                for v in graph[u]:
                    if dist[pair_v[v]] == float('inf'):
                        dist[pair_v[v]] = dist[u] + 1
                        queue.append(pair_v[v])
        return dist[None] != float('inf')

    def dfs(u):
        if u is not None:
            for v in graph[u]:
                if dist[pair_v[v]] == dist[u] + 1 and dfs(pair_v[v]):
                    pair_v[v] = u
                    pair_u[u] = v
                    return True
            dist[u] = float('inf')
            return False
        return True

    matching = 0
    while bfs():
        for u in left:
            if pair_u[u] is None and dfs(u):
                matching += 1

    
    result = {u: pair_u[u] for u in left if pair_u[u] is not None}
    return result
bipartite_graph = {
    'A': ['1', '2'],
    'B': ['1'],
    'C': ['2', '3'],
    'D': ['3']
}

max_matching = hopcroft_karp(bipartite_graph)
print("Maximum Matching:", max_matching)
